// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id           String    @id @unique
  email        String    @unique
  emailPublic  Boolean   @default(false)
  firstName    String    @map(name: "first_name")
  lastName     String?   @map(name: "last_name")
  handle       String    @unique
  headline     String?   @default("")
  aboutMe      String?   @default("") @map("about_me")
  imageUrl     String    @map(name: "image_url")
  externalUrls Json?     @map(name: "external_url")
  skills       Json?
  models       Model[]
  followers    Follows[] @relation("follower")
  following    Follows[] @relation("following")
  Likes        Likes[]   @relation("user")

  // stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
  // stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  // stripePriceId          String?   @map(name: "stripe_price_id")
  // stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")
}

model Model {
  id          Int     @id @default(autoincrement())
  name        String?
  description String?
  creator     User    @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId   String  @map("creator_id")
  downloadUrl String? @map("download_url")
  published   Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Likes     Likes[]  @relation("model")

  @@index([creatorId])
}

model Follows {
  follower    User   @relation("follower", fields: [followerId], references: [id])
  followerId  String @map("follower_id")
  following   User   @relation("following", fields: [followingId], references: [id])
  followingId String @map("following_id")

  @@id([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

model Likes {
  user    User   @relation("user", fields: [userId], references: [id])
  userId  String @map("user_id")
  model   Model  @relation("model", fields: [modelId], references: [id])
  modelId Int    @map("model_id")

  @@id([userId, modelId])
  @@index([userId])
  @@index([modelId])
}

// model Comment {
//   id
// }
